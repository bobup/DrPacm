<?php

/**
 * RecordCollection - this class holds a complete collection of "swim records".  Swim records could be
 * actual PAC records, or PAC fastest times published by USMS, or some other collection of splashes.
 * Each collection represents exactly one course (SCY, SCM, or LCM.)  Each splash in a collection
 * is indexed with a specific key = f( gender, age group, distance, stroke ) allowing easy comparison
 * across different collections.
 */

 
define( MAX_COLLISIONS, 1000 );		// used during hash collisions.  If we have more than this many then
									// we're going to assume something is very wrong!
 
 
class RecordCollection {
	public $course;		// SCY, SCM, or LCM
	public $recordCollection;		// associative array of splashes (specifically, AbstractSplash objects)
	public $numInCollection;		// number of splashes in this collection (includes collisions)
	public $numCollisions;			// number of times the same key matched 2 splashes
	public $numNotSane;				// number of "non-sane" records found in this collection.  See SanityCheck()
	
	public function __construct( $course ) {
		$this->course = $course;
		if( ($course != "SCY") && ($course != "SCM") && ($course != "LCM") ) {
			// note - there is no way to easily recover from this, so we're aborting!
			echo "RecordCollection::__construct():  passed invalid value for 'course': '$course'\n";
			echo "ABORT!\n";
			exit( 1 );
		}
		$this->recordCollection = array();
		$this->numInCollection = 0;
		$this->numCollisions = 0;
		$numNotSane = 0;
	} // end of __construct()
	
	
	/**
	 * add - add a splash to our RecordCollection
	 *
	 * PASSED:
	 * 	$obj - the AbstractSplash object to add to our collection.
	 *
	 */
	public function add( AbstractSplash $obj ) {
		$i = 0;
		
		// construct our key - we will use a perfect hash so the only collisions occur when there is a tie:
		$key = PerfectHash( strtolower($obj->gender), $obj->ageGroup, $obj->distance, strtolower($obj->stroke) );
		// the $key is a 9-12 character string
		if( isset( $this->recordCollection[$key] ) ) {
			// collision - march down the chain and find a "collision index" that will allow us to store this
			// object with its own unique key and yet allow us to find it again:
			for( $i=1; $i <= MAX_COLLISIONS; $i++ ) {
				if( !isset( $this->recordCollection[$key."--$i"] ) ) {
					// found an empty bucket - use it!  $i is the "collision index".
					$this->recordCollection[$key."--$i"] = $obj;
					$obj->key = $key."--$i";
					$this->numInCollection++;
					$this->numCollisions++;
					break;
				}
			}
			if( $i > MAX_COLLISIONS ) {
				// this has gotta be a bug...1000 collisions???  Not likely!
				echo "RecordCollection::add():  Found $i collisions with the key '$key'. " .
					"Splash (" . get_class( $obj ) . ") NOT added:\n";
				echo "  " . $obj->dump( $obj );
				new EmailException( NULL, $obj, "DrPacm internal limit reached: Found $i collisions with the key '$key'. ",
					"Splash (" . get_class( $obj ) . ") NOT added." );
			}
		} else {
			// no collision...yet!
			$this->recordCollection[$key] = $obj;
			$obj->key = $key;
			$this->numInCollection++;
		}
	} // end of add()
	
	
	
	/**
	 * GetTiedSplash - return the splash from this RecordCollection that has the passed $key combined with the
	 * 	passed $collisionIndex.
	 *
	 * PASSED:
	 * 	$key - a key generated by PerfectHash() of an object in this record collection.
	 * 	$collisionIndex - an addition to the $key to disambiguate two objects that hash to the same bucket in this
	 * 		record collection.  If 0 that means that there is no collision.
	 *
	 * RETURNED:
	 * 	$result - the object in this record collection whose key is $key combined with the passed $
	 * 		collisionIndex (if non-0).  Null if no such object exists.
	 * 		
	 * NOTES:
	 * 	For example, if the $key is "1234" and the $collisionIndex is "0", the result will be:
	 * 			- the record with the key "1234" if such a thing exists, OR NULL
	 * 	If the $key is "1234" and the $collisionIndex is "abc", the result will be:
	 * 			- the record with the key "1234--abc" if such a thing exists, OR NULL
	 *
	 *	Since the hash of splashes in a single RecordCollection is a perfect hash, the only way
	 *	two or more splashes have the same hash key (ignore collision index) is if they both
	 *	have the same gender, agegroup, distance, and stroke.  IOW, if we consider only PMS Records
	 *	and fastest times, two such splashes are ties.
	 *	
	 */
	function GetTiedSplash( $key, $collisionIndex ) {
		$result = NULL;				// assume this splash doesn't exist
		if( $collisionIndex != 0 ) {
			$key .= "--$collisionIndex";
		}
		// does the requested object exist?
		if( isset( $this->recordCollection[$key] ) ) {
			$result =  $this->recordCollection[$key];
		}
		return $result;
	} // end of GetTiedSplash()
	
	
	
	/**
	 * SanityCheck - Perform a sanity check on our collection of splashes.  Basically confirm:
	 * 		- that for all objects in this collection with the same base key they represent ties.
	 * 			Thus they must all have the same gender/age group/course/distance/stroke and the same duration.
	 *
	 * NOTES:
	 * 	This function will print out details on all offinding objects found.
	 * 	
	 */
	function SanityCheck() {
		// first of all, make sure we've got a "reasonably sized" record collection:
		$MINSIZE = 10;
		if( count( $this->recordCollection ) < 10 ) {
			echo "\nSANITY ERROR! Our RecordCollection object has fewer than $MINSIZE objects (it has " .
				count( $this->recordCollection ) . " total objects.)\n";
		}
		foreach( $this->recordCollection as $key => $splash ) {
			if( $splash->ftime == 2 ) {
				// this is an unverified record - ignore it
				continue;
			}
			$baseKey = BaseKey( $key );
			$collisionIndex = CollisionIndex( $key );
			// compare $splash with all ties of $splash with a higher collisionIndex:
			for( $i=$collisionIndex+1; $i <= MAX_COLLISIONS; $i++ ) {
				$tie = $this->GetTiedSplash( $baseKey, $i );
				if( $tie == NULL ) break;		// no (more) ties for this key+collisionIndex
				if( $tie->ftime == 2 ) {
					// this tie is an unverified tie - ignore it
					continue;
				}
				// we found a tie!  make sure we're sane
				if( ($splash->gender != $tie->gender) ||
					($splash->ageGroup != $tie->ageGroup) ||
					($splash->course != $tie->course) ||
					($splash->distance != $tie->distance) ||
					($splash->stroke != $tie->stroke ) ||
					($splash->durationHund != $tie->durationHund) ) {
					echo "\nSANITY ERROR! We found two 'ties' that don't look like ties:\n";
					echo $splash->dump();
					echo $tie->dump();
					echo "We will continue processing but this needs to be resolved!\n\n";
					$this->numNotSane++;
				}
			}
		}
	} // end of SanityCheck()
	
	

	/**
	 *	dump - dump (return a string) the current RecordCollection object.
	 *
	 * RETURNED:
	 * 	$result - a string containing a dump of each of the objects that make up this record collection.
	 *
	 */
	public function dump() {
		$result = "Dump of a RecordCollection.  numInCollection=$this->numInCollection, size=" . sizeof( $this->recordCollection ) . "\n";
		foreach( $this->recordCollection as $key=>$splash ) {
			$result .= "$key: ";
			$result .= $splash->dump();
			$result .= "\n";
		}
		return $result;
	} // end of dump()
	
} // end of class RecordCollection



?>